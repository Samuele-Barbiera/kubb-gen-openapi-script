openapi: 3.0.3
info:
  title: 'Parteasy - API DOC'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'https://api.parteasy.testing.on-code.net'
paths:
  /api/attachment/uploadPhoto:
    post:
      summary: UploadPhoto
      description: "Upload photo to specific model\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: multipart/form-data
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Attachment
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type_id:
                  type: integer
                  description: ''
                  example: 3
                type:
                  type: string
                  description: 'Must be one of <code>Event</code>, <code>Location</code>, or <code>Rider</code>.'
                  example: Event
                file:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 5120 kilobytes.'
              required:
                - type_id
                - type
                - file
  /api/attachment/getPhotosUrl:
    post:
      summary: GetPhoto
      description: "Get photo to specific model\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Attachment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type_id:
                  type: integer
                  description: ''
                  example: 2
                type:
                  type: string
                  description: 'Must be one of <code>Event</code>, <code>Location</code>, <code>Rider</code>, or <code>TicketTier</code>.'
                  example: Event
              required:
                - type_id
                - type
  '/api/attachment/deletePhoto/{uuid}':
    get:
      summary: UploadPhoto
      description: "Upload photo to specific model\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Attachment
    parameters:
      -
        in: path
        name: uuid
        description: 'Attachment id to search for'
        example: 8d079b21-6511-4ff7-a6a9-0a4e04698f29
        required: true
        schema:
          type: string
  /api/backoffice/status:
    get:
      summary: AdminAppStatus
      description: "Health check with extra information for admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        503:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice
  /api/backoffice/debugBecomeAdmin:
    get:
      summary: DebugBecomeAdmin
      description: "Upgrades the calling user role to Admin. TO DISABLE WHEN IN PRODUCTION\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice
  /api/backoffice/activation/team/toggle:
    post:
      summary: ToggleTeamActivation
      description: "Toggles wether a Team is active or not\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Activation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                active:
                  type: boolean
                  description: ''
                  example: true
              required:
                - id
                - active
  /api/backoffice/activation/ncc-team/toggle:
    post:
      summary: ToggleNccTeamActivation
      description: "Toggles wether a NccTeam is active or not\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Activation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                active:
                  type: boolean
                  description: ''
                  example: true
              required:
                - id
                - active
  /api/backoffice/activation/location/toggle:
    post:
      summary: ToggleLocationActivation
      description: "Toggles wether a Location is active or not\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Activation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                active:
                  type: boolean
                  description: ''
                  example: true
                external_location_id:
                  type: integer
                  description: ''
                  example: 34
              required:
                - id
                - active
  /api/backoffice/activation/rider/toggle:
    post:
      summary: ToggleRiderActivation
      description: "Toggles wether a Rider is active or not\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Activation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                active:
                  type: boolean
                  description: ''
                  example: true
              required:
                - id
                - active
  /api/backoffice/activation/vehicle/toggle:
    post:
      summary: ToggleVehicleActivation
      description: "Toggles wether a Vehicle is active or not\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Activation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                active:
                  type: boolean
                  description: ''
                  example: true
              required:
                - id
                - active
  '/api/backoffice/activation/get/{activable}':
    get:
      summary: GetActivables
      description: "Views all of viewables having the specified type and activation\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Activation
    parameters:
      -
        in: path
        name: activable
        description: 'Activable_type to search for'
        example: Location
        required: true
        schema:
          type: string
      -
        in: path
        name: active
        description: 'Optional parameter. bool optional Activable state to search for'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 'false'
  '/api/backoffice/activation/get/{activable}/{active}':
    get:
      summary: GetActivables
      description: "Views all of viewables having the specified type and activation\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Activation
    parameters:
      -
        in: path
        name: activable
        description: 'Activable_type to search for'
        example: Location
        required: true
        schema:
          type: string
      -
        in: path
        name: active
        description: 'Optional parameter. bool optional Activable state to search for'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 'false'
  /api/backoffice/configuration:
    get:
      summary: GetConfigurationValues
      description: "Shows all DB configuratable Configurations\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Backoffice.Configuration
  /api/backoffice/configuration/set:
    post:
      summary: EditConfiguration
      description: "Edits the specified configuration variable. Can only called by Admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: Invoicing.FeePayment
                value:
                  type: string
                  description: 'Must not be greater than 128 characters.'
                  example: '0.90'
                edit_reason:
                  type: string
                  description: ''
                  example: test
              required:
                - name
                - value
                - edit_reason
  '/api/backoffice/event/get/{event_id}':
    get:
      summary: GetEventAdmin
      description: "Shows specified Event. Calling user must be admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Backoffice.Event
    parameters:
      -
        in: path
        name: event_id
        description: 'Event id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/backoffice/event/validator/external/list:
    get:
      summary: GetExternalValidatorEvents
      description: "Shows to be processed by ExternalValidator Events\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Backoffice.Event
  /api/backoffice/event/validator/external/process:
    post:
      summary: EventExternalValidatorSetStatus
      description: "Chnages the event status. Team and Location needs to be active. Can only be changed by External Validator User\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                action:
                  type: string
                  description: 'Must be one of <code>Approve</code>, <code>Publish</code>, or <code>Reject</code> Must not be greater than 16 characters.'
                  example: Approve
                external_event_id:
                  type: integer
                  description: ''
                  example: 34
              required:
                - id
                - action
  /api/backoffice/invoice/view:
    post:
      summary: GetInvoicesAdmin
      description: "Views all Users invoices with filters.\n\nAbort operation"
      parameters:
        -
          in: query
          name: user_id
          description: ''
          example: 1
          required: false
          schema:
            type: integer
            description: ''
            example: 1
        -
          in: query
          name: party_id
          description: ''
          example: 1
          required: false
          schema:
            type: integer
            description: ''
            example: 1
        -
          in: query
          name: state
          description: 'Must be one of <code>Actualized</code>, <code>Cancelled</code>, <code>Draft</code>, <code>Paid</code>, or <code>Refounded</code>.'
          example: Paid
          required: false
          schema:
            type: string
            description: 'Must be one of <code>Actualized</code>, <code>Cancelled</code>, <code>Draft</code>, <code>Paid</code>, or <code>Refounded</code>.'
            example: Paid
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - Backoffice.Invoice
  '/api/backoffice/nccteam/get/{nccTeam}':
    get:
      summary: GetNccTeamAdmin
      description: "Shows specified NccTeam. Calling user must be admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Backoffice.NccTeam
    parameters:
      -
        in: path
        name: nccTeam
        description: ''
        example: officia
        required: true
        schema:
          type: string
      -
        in: path
        name: ncc_team_id
        description: 'Team id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/backoffice/nccteam/create:
    post:
      summary: CreateNccTeam
      description: "Creates a NccTeam. Calling user becomes Owner of this NccTeam\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Backoffice.NccTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must contain only letters, numbers, dashes and underscores. Must not be greater than 64 characters.'
                  example: villa-33e3
                description:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: VillaTest
                company_country:
                  type: string
                  description: 'Must not be greater than 2 characters.'
                  example: IT
                company_fiscal_code:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: FNTJSN82R01C436C
                company_tax_code:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: '31710440640'
                owner_user_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - name
                - company_country
                - company_fiscal_code
                - company_tax_code
                - owner_user_id
  '/api/backoffice/report/get/{report_id}':
    get:
      summary: GetReport
      description: "Views a Report. Can only called by Validator\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Report
    parameters:
      -
        in: path
        name: report_id
        description: 'Report id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/backoffice/report/list/validated:
    post:
      summary: GetReviewedReports
      description: "Shows reports. Has filters to get only already validated, to validate and by Reporter, ReportableEntity and ReportableAct\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Backoffice.Report
  /api/backoffice/report/search:
    post:
      summary: SearchReports
      description: "Shows reports. Has filters to get only already validated, to validate and by Reporter, ReportableEntity and ReportableAct\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Backoffice.Report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewed:
                  type: boolean
                  description: ''
                  example: false
                by:
                  type: string
                  description: 'Must be one of <code>Reporter</code>, <code>Reported</code>, or <code>Act</code>.'
                  example: Reporter
                model:
                  type: string
                  description: 'Must be one of <code>User</code>, <code>Rider</code>, <code>Ride</code>, <code>Team</code>, <code>Location</code>, <code>Event</code>, or <code>Party</code>.'
                  example: User
                model_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - by
  /api/backoffice/report/validator/list:
    get:
      summary: GetValidatorReports
      description: "Shows reports to review. Calling user must be Validator\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Backoffice.Report
  /api/backoffice/report/validator/process:
    post:
      summary: ReportValidatorReview
      description: "Used by the Validator to review a not already reviewed report\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                reviewer_note:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'Review di esempio'
              required:
                - id
                - reviewer_note
  /api/backoffice/report/validator/delete:
    post:
      summary: DeleteReport
      description: "Deletes a Report. Can only called by Validator\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
  /api/backoffice/review/validator/list:
    get:
      summary: GetValidatorReviews
      description: "Shows to be processed by ExternalValidator Events\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Backoffice.Review
  /api/backoffice/review/validator/process:
    post:
      summary: ReviewValidatorSetStatus
      description: "Used by the reviewer to approve, hide, archive or delete reviews\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                action:
                  type: string
                  description: 'Must be one of <code>Approve</code>, <code>Hide</code>, <code>Archive</code>, or <code>Delete</code> Must not be greater than 16 characters.'
                  example: Approve
              required:
                - id
                - action
  /api/backoffice/tag/list:
    get:
      summary: TagAdminList
      description: "Lists all tags. Calling user must be admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Tag
    parameters:
      -
        in: path
        name: tag_id
        description: 'Tag id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/backoffice/tag/create:
    post:
      summary: TagCreate
      description: "Creates a tag on the specified taggable\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 32 characters.'
                  example: Concert
                taggable_type:
                  type: string
                  description: 'Must be one of <code>Event</code> Must not be greater than 32 characters.'
                  example: Event
              required:
                - name
                - taggable_type
  '/api/backoffice/tag/delete/{tag_id}':
    post:
      summary: TagDelete
      description: "Deletes a tag on the specified taggable\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Tag
    parameters:
      -
        in: path
        name: tag_id
        description: 'Tag id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/backoffice/team/get/{team_id}':
    get:
      summary: GetTeamAdmin
      description: "Shows specified Team. Calling user must be admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Backoffice.Team
    parameters:
      -
        in: path
        name: team_id
        description: 'Team id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/backoffice/ticket/ticket/tier/validator/external/set:
    post:
      summary: TicketTierExternalValidatorSetInfo
      description: "Sets external information on the specified ticketTier. Team and Location needs to be active. Can only be changed by External Validator User\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.TicketTier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                external_ticket_tier_id:
                  type: integer
                  description: ''
                  example: 34
              required:
                - id
                - external_ticket_tier_id
  '/api/backoffice/transport/rider/get/{rider_user_id}':
    get:
      summary: GetRiderAdmin
      description: "Shows specified rider. Calling user must be admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Backoffice.Transport
    parameters:
      -
        in: path
        name: rider_user_id
        description: 'The ID of the rider user.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: user_id
        description: 'Rider id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/backoffice/transport/rider/list:
    get:
      summary: RidersAdminList
      description: "Lists all Riders. Calling user must be admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Transport
  /api/backoffice/transport/vehicle/delete:
    post:
      summary: TransportDeleteVehicle
      description: "Deletes specified vehicle. Calling user must be Admin.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Transport
  /api/backoffice/transport/vehicle-type/create:
    post:
      summary: TransportCreateVehicleType
      description: "Deletes specified vehicle. Calling user must be Admin.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.Transport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must contain only letters and numbers. Must not be greater than 64 characters.'
                  example: Bus
                title:
                  type: string
                  description: 'Must contain only letters and numbers. Must not be greater than 128 characters.'
                  example: rdxumfd
              required:
                - name
                - title
  '/api/backoffice/user/get/{user_id}':
    get:
      summary: AdminGetUser
      description: "Finds a user by user id. Calling user must be admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.User
    parameters:
      -
        in: path
        name: user_id
        description: 'Optional parameter. optional User id to look for'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 1
  '/api/backoffice/user/delete/{user_id}':
    get:
      summary: AdminDeleteUser
      description: "Deletes a user by user id. Calling user must be admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.User
    parameters:
      -
        in: path
        name: user_id
        description: 'Optional parameter. optional User id to look for'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 1
  /api/backoffice/user/list:
    get:
      summary: UsersAdminList
      description: "Lists all Users. Calling user must be admin\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.User
  /api/backoffice/user/role/add:
    post:
      summary: AdminAddRole
      description: "Adds the specified role to the specified user.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: ''
                  example: 1
                role:
                  type: string
                  description: 'Must be one of <code>Taxi</code>, <code>Validator</code>, or <code>ExternalValidator</code> Must not be greater than 32 characters.'
                  example: Validator
              required:
                - user_id
                - role
  /api/backoffice/user/role/remove:
    post:
      summary: AdminRemoveRole
      description: "Removes the specified role from the specified user.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Backoffice.User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: ''
                  example: 1
                role:
                  type: string
                  description: 'Must be one of <code>Taxi</code>, <code>Validator</code>, or <code>ExternalValidator</code> Must not be greater than 32 characters.'
                  example: Validator
              required:
                - user_id
                - role
  /api/event/search:
    post:
      summary: SearchEvents
      description: "Shows public event filtered by optional arguments\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: evento
                tags:
                  type: array
                  description: 'Must be one of <code>House music</code>, <code>Techno</code>, <code>Reggaeton</code>, <code>Trap</code>, <code>Hip hop</code>, <code>Live music</code>, <code>Rock music</code>, <code>Musica Italiana</code>, or <code>Pop</code> Must be at least 1 characters. Must not be greater than 64 characters.'
                  example:
                    - Live
                  items:
                    type: string
                latitude:
                  type: string
                  description: Latitude
                  example: '0.443'
                longitude:
                  type: string
                  description: Longitude
                  example: '23.443'
                radius:
                  type: number
                  description: 'Must be between 1 and 300000.'
                  example: 10000.0
                when:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>today</code>.'
                  example: 09/25/22
              required:
                - latitude
                - longitude
    parameters:
      -
        in: path
        name: event_id
        description: 'Event id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/event/view/live:
    get:
      summary: GetPublicEvents
      description: "Shows all available events in all locations\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Event
  /api/event/view/suggested:
    get:
      summary: getPublicSuggestedEvents
      description: "Shows all available events in location\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Event
  '/api/event/view/live/location/{location_id}':
    get:
      summary: GetPublicEventsInLocation
      description: "Shows all available events in location\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Event
    parameters:
      -
        in: path
        name: location_id
        description: 'Location id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/event/view/{event_id}':
    get:
      summary: GetPublicEvent
      description: "Shows specified event if public\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Event
    parameters:
      -
        in: path
        name: event_id
        description: 'Event id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/event/view/private/team/{team_id}/{event_id}':
    get:
      summary: GetEvent
      description: "Shows specified event for Team Owner only\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Event
    parameters:
      -
        in: path
        name: team_id
        description: 'Team id to search for'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: event_id
        description: 'Event id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/event/view/private/team/{team_id}':
    get:
      summary: GetEvents
      description: "Shows specified subEvent if public\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Event
    parameters:
      -
        in: path
        name: team_id
        description: 'Team id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/event/view/private/location/{location_id}/{state}':
    get:
      summary: GetLocationEvents
      description: "Shows all events for specific location and filtered by state (if the user is part of the team that owns [Owner,User] the location)\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Event
    parameters:
      -
        in: path
        name: location_id
        description: 'location id to search for'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: state
        description: 'Optional parameter. optional event state name to search for'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: Published
  /api/event/create:
    post:
      summary: CreateEvent
      description: "Creates an event. Team and Location needs to be active. Can only be created by Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                location_id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: '1st Location'
                description:
                  type: string
                  description: 'Must not be greater than 512 characters.'
                  example: Team1-AAAAA
                date_begin:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>yesterday</code>.'
                  example: 09/20/22
                date_end:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>yesterday</code>.'
                  example: 09/25/22
                guest:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: 'mon,tue'
                tags:
                  type: array
                  description: 'Must be one of <code>House music</code>, <code>Techno</code>, <code>Reggaeton</code>, <code>Trap</code>, <code>Hip hop</code>, <code>Live music</code>, <code>Rock music</code>, <code>Musica Italiana</code>, or <code>Pop</code> Must be at least 1 characters. Must not be greater than 64 characters.'
                  example:
                    - Live
                    - Music
                  items:
                    type: string
              required:
                - team_id
                - location_id
                - name
                - guest
                - tags
  /api/event/edit:
    post:
      summary: EditEvent
      description: "Edits an event. Team and Location needs to be active. Can only be edited by Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                team_id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: '1st Location Edit'
                description:
                  type: string
                  description: 'Must not be greater than 512 characters.'
                  example: Team1-AAAAA-Edit
                date_begin:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>yesterday</code>.'
                  example: 09/25/22
                date_end:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>yesterday</code>.'
                  example: 09/29/22
                guest:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: 'mon,tue,sat'
                tags:
                  type: array
                  description: 'Must be one of <code>House music</code>, <code>Techno</code>, <code>Reggaeton</code>, <code>Trap</code>, <code>Hip hop</code>, <code>Live music</code>, <code>Rock music</code>, <code>Musica Italiana</code>, or <code>Pop</code> Must be at least 1 characters. Must not be greater than 64 characters.'
                  example:
                    - Live
                    - Music
                    - DJ
                  items:
                    type: string
              required:
                - id
                - team_id
                - name
                - guest
                - tags
  /api/event/delete:
    post:
      summary: DeleteEvent
      description: "Delete an event. Team and Location needs to be active. Can only be deleted by Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - team_id
                - id
  /api/event/state:
    post:
      summary: EventSetState
      description: "Chnages the event status. Team and Location needs to be active. Can only be changed by Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                team_id:
                  type: integer
                  description: ''
                  example: 1
                state:
                  type: string
                  description: 'Must be one of <code>ApprovalRequested</code> or <code>Published</code>.'
                  example: Published
              required:
                - id
                - team_id
                - state
  /api/feedback/like/add:
    post:
      summary: Like
      description: "Likes the specified model\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success", ''data'': {}}}'
      tags:
        - Feedback.Like
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                likeable:
                  type: string
                  description: 'Must be one of <code>Event</code>.'
                  example: Event
                likeable_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - likeable
  /api/feedback/like/is:
    post:
      summary: GetIsLiked
      description: "Returns wether the specified model is liked by the calling user or not\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success", ''data'': {}}}'
      tags:
        - Feedback.Like
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                likeable:
                  type: string
                  description: 'Must be one of <code>Event</code>.'
                  example: Event
                likeable_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - likeable
  /api/feedback/like/get:
    post:
      summary: GetLiked
      description: "Get  all liked models with the specified model of the current calling user\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success", ''data'': {}}}'
      tags:
        - Feedback.Like
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                likeable:
                  type: string
                  description: 'Must be one of <code>Event</code>.'
                  example: Event
                likeable_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - likeable
  /api/feedback/like/remove:
    post:
      summary: Unlike
      description: "Unlikes the specified model\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success", ''data'': {}}}'
      tags:
        - Feedback.Like
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                likeable:
                  type: string
                  description: 'Must be one of <code>Event</code>.'
                  example: Event
                likeable_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - likeable
  /api/feedback/like/count:
    post:
      summary: GetLikesCount
      description: "Get the count of likes for the specified model\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success", ''data'': {}}}'
      tags:
        - Feedback.Like
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                likeable:
                  type: string
                  description: 'Must be one of <code>Event</code>.'
                  example: Event
                likeable_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - likeable
  /api/feedback/report/create:
    post:
      summary: CreateReport
      description: "Creates a new Report on the specified Reportable, using the specified Reporter and with the specified Act if present\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Feedback.Report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'Motivazione valida'
                reason_comment:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'Argomentazione motivazione valida'
                reporter:
                  type: string
                  description: 'Must be one of <code>User</code>, <code>Rider</code>, or <code>Team</code>.'
                  example: User
                reporter_id:
                  type: integer
                  description: ''
                  example: 1
                reportable_entity:
                  type: string
                  description: 'Must be one of <code>User</code>, <code>Rider</code>, <code>Team</code>, or <code>Party</code>.'
                  example: Rider
                reportable_entity_id:
                  type: integer
                  description: ''
                  example: 1
                reportable_act:
                  type: string
                  description: 'Must be one of <code>Ride</code>, <code>Event</code>, <code>Location</code>, <code>Team</code>, or <code>Party</code>.'
                  example: Ride
                reportable_act_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - reason
                - reason_comment
                - reporter
                - reporter_id
                - reportable_entity
                - reportable_entity_id
  /api/feedback/review/create:
    post:
      summary: Create
      description: "Creates a review on the specified model if the model satisfies the check\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success", ''data'': {}}}'
      tags:
        - Feedback.Review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must not be greater than 128 characters.'
                  example: vwzoevspccgldhfamxuejebttwwjnswtrnleultkwghdbagwgpjfypxiykzbtaamvvspwbddklhsebazjkzbbhijcyutsvqnofolksghwuzudbg
                description:
                  type: string
                  description: ''
                  example: 'Super ride'
                rating:
                  type: integer
                  description: 'Must be between 1 and 10.'
                  example: 8
                reviewable:
                  type: string
                  description: 'Must be one of <code>Rider</code>.'
                  example: Rider
                reviewable_id:
                  type: integer
                  description: ''
                  example: 1
                reviewing:
                  type: string
                  description: 'Must be one of <code>Ride</code>.'
                  example: Ride
                reviewing_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - title
                - description
                - rating
                - reviewable
                - reviewable_id
  /api/feedback/review/get:
    post:
      summary: GetReviewableReviews
      description: "Gets all the reviews the specified reviewable has received\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Feedback.Review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewable:
                  type: string
                  description: 'Must be one of <code>Rider</code>.'
                  example: Rider
                reviewable_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - reviewable
                - reviewable_id
  /api/feedback/review/get/own:
    post:
      summary: GetOwnReviews
      description: "Views all of the calling User's reviews\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Feedback.Review
  '/api/feedback/review/get/user/{user_id}':
    post:
      summary: GetUserReviews
      description: "Views all the specified reviews publicly\n\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Feedback.Review
    parameters:
      -
        in: path
        name: user_id
        description: 'User id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/invoice/buy:
    post:
      summary: Buy
      description: "Initates a buy operation on the specified billable\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - Invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                billable:
                  type: string
                  description: 'Must be one of <code>TableTier</code>, <code>Ride</code>, or <code>TicketTier</code>.'
                  example: Ride
                billable_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - billable
                - billable_id
  '/api/invoice/applyCoupon/{invoice_id}':
    post:
      summary: ApplyCoupon
      description: "Applies a coupon on the specified invoice\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - Invoice
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: ''
                  example: TEST
    parameters:
      -
        in: path
        name: invoice_id
        description: 'Invoice id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/invoice/pay/{invoice_id}':
    post:
      summary: Pay
      description: "Starts the stripe payment operation for paying the invoice\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - Invoice
    parameters:
      -
        in: path
        name: invoice_id
        description: 'Invoice id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/invoice/view:
    get:
      summary: getInvoices
      description: "Views all calling User invoices.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - Invoice
  /api/invoice/viewFiltered:
    post:
      summary: getInvoicesFiltered
      description: "Views all calling User invoices by state filter.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - Invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                states:
                  type: array
                  description: 'Must be one of <code>Actualized</code>, <code>Cancelled</code>, <code>Draft</code>, <code>Paid</code>, or <code>Refounded</code> Must be at least 1 characters. Must not be greater than 64 characters.'
                  example:
                    - Requested
                    - Accepted
                  items:
                    type: string
              required:
                - states
  '/api/invoice/view/{invoice_id}':
    get:
      summary: getInvoice
      description: "Views specified invocie of the calling user.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - Invoice
    parameters:
      -
        in: path
        name: invoice_id
        description: 'Invoice id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/invoice/viewByBillable/{billable_type}/{billable_id}':
    get:
      summary: getInvoiceByBillable
      description: "Views specified invocie of the calling user.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - Invoice
    parameters:
      -
        in: path
        name: billable_type
        description: ''
        example: tempora
        required: true
        schema:
          type: string
      -
        in: path
        name: billable_id
        description: 'The ID of the billable.'
        example: adipisci
        required: true
        schema:
          type: string
      -
        in: path
        name: invoice_id
        description: 'Invoice id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/location/create:
    post:
      summary: CreateLocation
      description: "Creates a new location and assigns it to the calling Team\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: '1'
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: '1'
                    description: Data
      tags:
        - Location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: '1st Location'
                description:
                  type: string
                  description: 'Must not be greater than 512 characters.'
                  example: Team1-AAAAA
                address:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: 'Via Mondo'
                latitude:
                  type: string
                  description: Latitude
                  example: '0.443'
                longitude:
                  type: string
                  description: Longitude
                  example: '23.443'
                times:
                  type: string
                  description: 'Must not be greater than 80 characters.'
                  example: '0:33,0:34'
                days:
                  type: string
                  description: ''
                  example: 'mon,tue'
                age_people:
                  type: string
                  description: 'Must not be greater than 8 characters.'
                  example: MF
                location_category:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: test-categoria
                max_people:
                  type: integer
                  description: 'Must be between 0 and 100000.'
                  example: 10
              required:
                - team_id
                - name
                - address
                - latitude
                - longitude
                - times
                - days
                - age_people
                - location_category
                - max_people
  /api/location/edit:
    post:
      summary: EditLocation
      description: "Edites a location. Calling Team must be Owner of the Location\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: '1st Location Edit'
                description:
                  type: string
                  description: 'Must not be greater than 512 characters.'
                  example: 'Team1-AAAAA Edit'
                address:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: 'Via Mondo Edit'
                latitude:
                  type: string
                  description: Latitude
                  example: '0.443'
                longitude:
                  type: string
                  description: Longitude
                  example: '23.443'
                times:
                  type: string
                  description: 'Must not be greater than 16 characters.'
                  example: '0:31,0:37'
                days:
                  type: string
                  description: 'Must not be greater than 80 characters.'
                  example: 'mon,tue,sat'
                age_people:
                  type: string
                  description: 'Must not be greater than 8 characters.'
                  example: 18-21
                location_category:
                  type: string
                  description: 'Must not be greater than 32 characters.'
                  example: test-categoria
                max_people:
                  type: integer
                  description: 'Must be between 0 and 100000.'
                  example: 11
              required:
                - id
                - name
                - address
                - latitude
                - longitude
                - times
                - days
                - age_people
                - location_category
                - max_people
  '/api/location/get/{location_id}':
    get:
      summary: GetLocation
      description: "Views a location by id\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                    name: '1st Location'
                    description: Team1-AAAAA
                    address: 'Via Mondo'
                    latitude: '0.44300000'
                    longitude: '23.44300000'
                    days: 'mon,tue'
                    times: '0:33,0:34'
                    age_people: MF
                    location_category: test-categoria
                    max_people: 10
                    active: true
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                      name: '1st Location'
                      description: Team1-AAAAA
                      address: 'Via Mondo'
                      latitude: '0.44300000'
                      longitude: '23.44300000'
                      days: 'mon,tue'
                      times: '0:33,0:34'
                      age_people: MF
                      location_category: test-categoria
                      max_people: 10
                      active: true
                    description: Data
      tags:
        - Location
    parameters:
      -
        in: path
        name: location_id
        description: 'The ID of the location.'
        example: 1
        required: true
        schema:
          type: integer
  /api/ncc-team/create:
    post:
      summary: CreateNccTeam
      description: "Creates a NccTeam. Calling user becomes Owner of this NccTeam\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - NccTeam
  /api/ncc-team/edit:
    post:
      summary: EditNccTeam
      description: "Edites a NccTeam. Calling user must be Owner of this NccTeam\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - NccTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                description:
                  type: string
                  description: ''
                  example: VillaTestEdit
                opening_hours:
                  type: string
                  description: 'Must be a valid JSON string.'
                  example: '[{"@type":"OpeningHoursSpecification","dayOfWeek":"Monday","opens":"09:00","closes":"12:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Monday","opens":"13:00","closes":"20:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Tuesday","opens":"09:00","closes":"12:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Tuesday","opens":"13:00","closes":"20:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Wednesday","opens":"09:00","closes":"12:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Wednesday","opens":"13:00","closes":"20:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Thursday","opens":"09:00","closes":"12:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Thursday","opens":"13:00","closes":"20:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Friday","opens":"09:00","closes":"12:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Friday","opens":"13:00","closes":"20:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Saturday","opens":"09:00","closes":"12:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Saturday","opens":"13:00","closes":"20:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Sunday","opens":"09:00","closes":"12:00"},{"@type":"OpeningHoursSpecification","dayOfWeek":"Sunday","opens":"13:00","closes":"20:00"}]'
              required:
                - id
                - opening_hours
  /api/ncc-team/user/teams:
    get:
      summary: GetMyNccTeams
      description: "Gets all the NccTeams the calling user is in\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - NccTeam
  /api/ncc-team/user/remove:
    post:
      summary: RemoveUserFromNccTeam
      description: "Calling NccTeam Owner removes the specified user from the NccTeam\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - NccTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                user_id:
                  type: integer
                  description: ''
                  example: 2
              required:
                - id
                - user_id
  /api/ncc-team/user/role/add:
    post:
      summary: AddUserRoleNccTeam
      description: "Calling NccTeam Owner adds the specified Role of the user\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - NccTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                user_id:
                  type: integer
                  description: ''
                  example: 1
                role:
                  type: string
                  description: 'Must be one of <code>Driver</code>, <code>Manager</code>, <code>Owner</code>, or <code>User</code> Must not be greater than 64 characters.'
                  example: Manager
              required:
                - id
                - user_id
                - role
  /api/ncc-team/user/role/remove:
    post:
      summary: RemoveUserRoleNccTeam
      description: "Calling NccTeam Owner removes the specified Role of the user\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - NccTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                user_id:
                  type: integer
                  description: ''
                  example: 1
                role:
                  type: string
                  description: 'Must be one of <code>Driver</code>, <code>Manager</code>, <code>Owner</code>, or <code>User</code> Must not be greater than 64 characters.'
                  example: Manager
              required:
                - id
                - user_id
                - role
  /api/ncc-team/status/change:
    post:
      summary: ChangeNccTeamStatus
      description: "Changes the current status of the NccTeam. Can only called by User with Owner or Manager role.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - NccTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Must be one of <code>Offline</code>, <code>Online</code>, or <code>Live</code> Must not be greater than 8 characters.'
                  example: Offline
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - status
                - ncc_team_id
  '/api/ncc-team/get/{nccTeam_id}':
    get:
      summary: GetNccTeam
      description: "Gets the passed NccTeam. Calling User must be User of related NccTeam\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - NccTeam
    parameters:
      -
        in: path
        name: nccTeam_id
        description: 'NccTeam id to search issued invites for'
        example: 1
        required: true
        schema:
          type: integer
  /api/ncc-team/invites/invite:
    post:
      summary: CreateNccTeamInvite
      description: "Invites a user to this NccTeam with the specified role. Calling user must be Owner of this NccTeam\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - NccTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                role:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: Manager
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: z.stefano.45+a@gmail.com
              required:
                - id
                - role
                - email
  /api/ncc-team/invites/delete:
    post:
      summary: DeleteNccTeamInvite
      description: "Calling NccTeam Owner deletes the specified user invite.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - NccTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                invite_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - invite_id
  '/api/ncc-team/invites/accept/{token}':
    get:
      summary: AcceptNccTeamInvite
      description: "Calling user accepts the invite and joins the NccTeam with specified role.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - NccTeam
    parameters:
      -
        in: path
        name: token
        description: 'Token id for finding the invite'
        example: 2EWf1YimeNuhLC4KXehxfg4xAcE
        required: true
        schema:
          type: string
  '/api/ncc-team/invites/decline/{token}':
    get:
      summary: DeclineNccTeamInvite
      description: "Calling user declines the invite.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - NccTeam
    parameters:
      -
        in: path
        name: token
        description: 'Token id for finding the invite'
        example: 2EWf2WDzr37t8MTz1CCKH9nqg2C
        required: true
        schema:
          type: string
  /api/ncc-team/invites/received:
    get:
      summary: GetReceivedNccTeamInvites
      description: "Gets all the NccTeam invitations the calling user received\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - NccTeam
  '/api/ncc-team/invites/issued/{team}':
    get:
      summary: GetIssuedNccTeamInvites
      description: "Views all the invites that were created for this NccTeam. User must be Owner of this NccTeam\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - NccTeam
    parameters:
      -
        in: path
        name: team
        description: ''
        example: repellendus
        required: true
        schema:
          type: string
      -
        in: path
        name: NccTeam_id
        description: 'nccTeam id to search issued invites for'
        example: 1
        required: true
        schema:
          type: integer
  /api/ncc-team/ncc-location/create:
    post:
      summary: CreateNccLocation
      description: "Creates a new NccLocation and assigns it to the calling NccTeam\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: '1'
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: '1'
                    description: Data
      tags:
        - NccTeam.Location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: '1st Team Ncc Vehicle Warehouse'
                description:
                  type: string
                  description: 'Must not be greater than 512 characters.'
                  example: NccTeam1-BBBBB
                address:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: 'Via Mondo'
                latitude:
                  type: string
                  description: Latitude
                  example: '0.443'
                longitude:
                  type: string
                  description: Longitude
                  example: '23.443'
                action_range:
                  type: string
                  description: Longitude
                  example: '40.1'
              required:
                - ncc_team_id
                - name
                - address
                - latitude
                - longitude
                - action_range
  /api/ncc-team/ncc-location/edit:
    post:
      summary: EditNccLocation
      description: "Edites a NccLocation. Calling NccTeam must be Owner of the Location\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - NccTeam.Location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                description:
                  type: string
                  description: 'Must not be greater than 512 characters.'
                  example: 'NccTeam1-BBBBB Edit'
                available:
                  type: boolean
                  description: ''
                  example: true
              required:
                - id
                - description
                - available
  /api/ncc-team/ncc-location/delete:
    post:
      summary: DeleteNccLocation
      description: "Deletes a location. Calling Team must be Owner of the Location\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - NccTeam.Location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
                id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - ncc_team_id
                - id
  '/api/ncc-team/ncc-location/get/{location_id}':
    get:
      summary: GetNccLocation
      description: "Views a location by id\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                    name: '1st Location'
                    description: Team1-AAAAA
                    address: 'Via Mondo'
                    latitude: '0.44300000'
                    longitude: '23.44300000'
                    days: 'mon,tue'
                    times: '0:33,0:34'
                    age_people: MF
                    location_category: test-categoria
                    max_people: 10
                    active: true
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                      name: '1st Location'
                      description: Team1-AAAAA
                      address: 'Via Mondo'
                      latitude: '0.44300000'
                      longitude: '23.44300000'
                      days: 'mon,tue'
                      times: '0:33,0:34'
                      age_people: MF
                      location_category: test-categoria
                      max_people: 10
                      active: true
                    description: Data
      tags:
        - NccTeam.Location
    parameters:
      -
        in: path
        name: location_id
        description: 'The ID of the location.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/ncc-team/ncc-location/list/{nccTeam_id}':
    get:
      summary: GetTeamNccLocations
      description: "Views all the NccLocations of the calling NccTeam\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                    name: '1st Location'
                    description: Team1-AAAAA
                    address: 'Via Mondo'
                    latitude: '0.44300000'
                    longitude: '23.44300000'
                    days: 'mon,tue'
                    times: '0:33,0:34'
                    age_people: MF
                    location_category: test-categoria
                    max_people: 10
                    active: true
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                      name: '1st Location'
                      description: Team1-AAAAA
                      address: 'Via Mondo'
                      latitude: '0.44300000'
                      longitude: '23.44300000'
                      days: 'mon,tue'
                      times: '0:33,0:34'
                      age_people: MF
                      location_category: test-categoria
                      max_people: 10
                      active: true
                    description: Data
      tags:
        - NccTeam.Location
    parameters:
      -
        in: path
        name: nccTeam_id
        description: 'The ID of the nccTeam.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: ncc_team_id
        description: 'The ID of the location.'
        example: 1
        required: true
        schema:
          type: integer
  /api/party/create:
    post:
      summary: CreateParty
      description: "Creates a Party. Calling user becomes Owner of that Party\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Party
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: party-33e3
                description:
                  type: string
                  description: 'Must not be greater than 128 characters.'
                  example: PartyBono
                buying_item_type:
                  type: string
                  description: 'Must be one of <code>TableTier</code> or <code>Ride</code>.'
                  example: Ride
                buying_item_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - name
                - buying_item_type
                - buying_item_id
  /api/party/edit:
    post:
      summary: EditParty
      description: "Edites a Party. Calling user must be Owner of that Party\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Party
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: Party1-AAAAAAAAAAAAAA
                description:
                  type: string
                  description: 'Must not be greater than 128 characters.'
                  example: aaaaPArtyaaaBBb
              required:
                - id
                - name
  /api/party/close:
    post:
      summary: Close
      description: "Calling Party member closes group for creating payment invoices\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Party
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                pay_all:
                  type: boolean
                  description: ''
                  example: false
              required:
                - id
                - pay_all
  '/api/party/user/parties/{state}':
    get:
      summary: GetMyParties
      description: "Gets all the Parties the calling user is in\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Party
    parameters:
      -
        in: path
        name: state
        description: 'state name to search for'
        example: Open
        required: true
        schema:
          type: string
  '/api/party/get/{party_id}':
    get:
      summary: getParty
      description: "Get party info by id. User must be user of this Party\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Party
    parameters:
      -
        in: path
        name: party_id
        description: 'Party id to search issued invites for'
        example: 1
        required: true
        schema:
          type: integer
  /api/party/user/remove:
    post:
      summary: RemoveUserFromParty
      description: "Calling Party Owner removes the specified user from the Party\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Party
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                user_id:
                  type: integer
                  description: ''
                  example: 2
              required:
                - id
                - user_id
  /api/party/invites/invite:
    post:
      summary: CreatePartyInvite
      description: "Invites a user to this Party. Calling user must be Owner of this Party\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - Party
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: z.stefano.45+a@gmail.com
              required:
                - id
                - email
  /api/party/invites/delete:
    post:
      summary: DeletePartyInvite
      description: "Calling Party Owner deletes the specified user invite.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Party
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                invite_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - invite_id
  '/api/party/invites/accept/{token}':
    get:
      summary: AcceptTeamInvite
      description: "Calling user accepts the invite and joins the Party.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Party
    parameters:
      -
        in: path
        name: token
        description: 'Token id for finding the invite'
        example: 2EWeqYjQOCdbyuU5CgomOIIn1u9
        required: true
        schema:
          type: string
  '/api/party/invites/decline/{token}':
    get:
      summary: DeclinePartyInvite
      description: "Calling user declines the invite.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Party
    parameters:
      -
        in: path
        name: token
        description: 'Token id for finding the invite'
        example: 2EWevSPWXs8wsYUDsESs99Zez3g
        required: true
        schema:
          type: string
  /api/party/invites/received:
    get:
      summary: GetReceivedInvites
      description: "Gets all the Party invitations the calling user received\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Party
  '/api/party/invites/issued/{party_id}':
    get:
      summary: GetIssuedPartyInvites
      description: "Views all the invites that were created for this Party. User must be Owner of this Party\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Party
    parameters:
      -
        in: path
        name: party_id
        description: 'Party id to search issued invites for'
        example: 1
        required: true
        schema:
          type: integer
  /api/status:
    get:
      summary: Status
      description: "Health check\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        503:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Root
  /api/locales:
    get:
      summary: AvailableLocales
      description: "Returns the list of available localizations of the app\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        503:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Root
  /api/oauths:
    get:
      summary: AvailableSocialites
      description: "Returns the list of available social logins of the app\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        503:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Root
  '/api/tag/get/{taggable}':
    get:
      summary: GetTags
      description: "Creates a team. Calling user becomes Owner of this Team\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Tag
    parameters:
      -
        in: path
        name: taggable
        description: 'Taggable_type to search for'
        example: Event
        required: true
        schema:
          type: string
  /api/team/create:
    post:
      summary: CreateTeam
      description: "Creates a team. Calling user becomes Owner of this Team\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must contain only letters, numbers, dashes and underscores. Must not be greater than 64 characters.'
                  example: villa-33e3
                description:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: VillaTest
              required:
                - name
  /api/team/edit:
    post:
      summary: EditTeam
      description: "Edites a team. Calling user must be Owner of this Team\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                description:
                  type: string
                  description: ''
                  example: VillaTestEdit
              required:
                - id
  /api/team/user/teams:
    get:
      summary: GetMyTeams
      description: "Gets all the Teams the calling user is in\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Team
  /api/team/user/remove:
    post:
      summary: RemoveUserFromTeam
      description: "Calling Team Owner removes the specified user from the Team\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                user_id:
                  type: integer
                  description: ''
                  example: 2
              required:
                - id
                - user_id
  /api/team/user/role/add:
    post:
      summary: AddUserRoleTeam
      description: "Calling Team Owner adds the specified Role of the user\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                user_id:
                  type: integer
                  description: ''
                  example: 1
                role:
                  type: string
                  description: 'Must be one of <code>Manager</code>, <code>Owner</code>, or <code>User</code> Must not be greater than 64 characters.'
                  example: Manager
              required:
                - id
                - user_id
                - role
  /api/team/user/role/remove:
    post:
      summary: RemoveUserRoleTeam
      description: "Calling Team Owner removes the specified Role of the user\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                user_id:
                  type: integer
                  description: ''
                  example: 1
                role:
                  type: string
                  description: 'Must be one of <code>Manager</code>, <code>Owner</code>, or <code>User</code> Must not be greater than 64 characters.'
                  example: Manager
              required:
                - id
                - user_id
                - role
  '/api/team/get/{team_id}':
    get:
      summary: GetTeam
      description: "Gets the passed Team. Calling User must be User of related Team\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Team
    parameters:
      -
        in: path
        name: team_id
        description: 'Team id to search issued invites for'
        example: 1
        required: true
        schema:
          type: integer
  /api/team/invites/invite:
    post:
      summary: CreateTeamInvite
      description: "Invites a user to this Team with the specified role. Calling user must be Owner of this Team\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"status": "200", "message": "Success"}}'
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                role:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: Manager
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: z.stefano.45+a@gmail.com
              required:
                - id
                - role
                - email
  /api/team/invites/delete:
    post:
      summary: DeleteTeamInvite
      description: "Calling Team Owner deletes the specified user invite.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                invite_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - invite_id
  '/api/team/invites/accept/{token}':
    get:
      summary: AcceptTeamInvite
      description: "Calling user accepts the invite and joins the Team with specified role.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team
    parameters:
      -
        in: path
        name: token
        description: 'Token id for finding the invite'
        example: 2EWf1YimeNuhLC4KXehxfg4xAcE
        required: true
        schema:
          type: string
  '/api/team/invites/decline/{token}':
    get:
      summary: DeclineTeamInvite
      description: "Calling user declines the invite.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team
    parameters:
      -
        in: path
        name: token
        description: 'Token id for finding the invite'
        example: 2EWf2WDzr37t8MTz1CCKH9nqg2C
        required: true
        schema:
          type: string
  /api/team/invites/received:
    get:
      summary: GetReceivedTeamInvites
      description: "Gets all the Team invitations the calling user received\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Team
  '/api/team/invites/issued/{team_id}':
    get:
      summary: GetIssuedTeamInvites
      description: "Views all the invites that were created for this Team. User must be Owner of this Team\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Team
    parameters:
      -
        in: path
        name: team_id
        description: 'Team id to search issued invites for'
        example: 1
        required: true
        schema:
          type: integer
  /api/team/subscriptions/plans:
    get:
      summary: GetPlans
      description: "Get all available team subscription plans\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Team.Subscription
  /api/team/subscriptions/buy:
    post:
      summary: BuyPlan
      description: "Buys a specific plan for the team. Can only be called by Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team.Subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: 2EWhEtk49M98iocHXTHDcQhmcbv
                team_id:
                  type: integer
                  description: ''
                  example: 1
                plan:
                  type: integer
                  description: ''
                  example: 1
              required:
                - token
                - team_id
                - plan
  '/api/team/subscriptions/initPayment/{team_id}':
    get:
      summary: initPayment
      description: "Init the payment for the team subscription. Can only be called by Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team.Subscription
    parameters:
      -
        in: path
        name: team_id
        description: 'Team id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/team/subscriptions/current/{team_id}':
    get:
      summary: GetActivePlan
      description: "Gets the current active Plan for the specified Team. Can only be called by Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team.Subscription
    parameters:
      -
        in: path
        name: team_id
        description: 'Team id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/team/subscriptions/stripe/{team_id}':
    get:
      summary: getStripePortal
      description: "Get url auth to stripe. Can only be called by Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team.Subscription
    parameters:
      -
        in: path
        name: team_id
        description: 'Team id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/team/subscriptions/cancel/{team_id}':
    get:
      summary: CancelSubscription
      description: "Cancels a Subscription for the specified Team. Can only be called by Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Team.Subscription
    parameters:
      -
        in: path
        name: team_id
        description: 'Team id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/ticketing/table/tier/get/{event_id}':
    get:
      summary: GetEventTableTiers
      description: "Views all viewable Table Tiers for specified Event. Related Event Team User can also view non public Table Tiers\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Ticketing.Table
    parameters:
      -
        in: path
        name: event_id
        description: 'Event id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/ticketing/table/tier/id/{tableTier_id}':
    get:
      summary: GetTableTier
      description: "Views a Table Tier by id. Related Event Team Owner can also view non public Tablet Tiers\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Ticketing.Table
    parameters:
      -
        in: path
        name: tableTier_id
        description: 'TableTier id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/ticketing/table/tier/create:
    post:
      summary: CreateTableTier
      description: "Creates a Table Tier on the related Event. Can only be created by related Event Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Ticketing.Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                event_id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 32 characters.'
                  example: 'Biglietto Base'
                description:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: Pane
                rules:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: 'ofage,age-range:14-35'
                price:
                  type: string
                  description: Price
                  example: '100.99'
                quantity:
                  type: number
                  description: ''
                  example: 2.0
                min_party_size:
                  type: number
                  description: ''
                  example: 5.0
                max_party_size:
                  type: number
                  description: ''
                  example: 23.2983716
                expires_at:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>yesterday</code>.'
                  example: '2061-04-09'
              required:
                - team_id
                - event_id
                - name
                - description
                - price
                - quantity
                - min_party_size
                - max_party_size
  /api/ticketing/table/tier/edit:
    post:
      summary: EditTableTier
      description: "Edites a Table Tier on the related Event. Can only be edited by related Event Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Ticketing.Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                id:
                  type: integer
                  description: ''
                  example: 12
                description:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: Pane2
                rules:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: 'ofage,age-range:16-40'
                public:
                  type: boolean
                  description: ''
                  example: false
                resettable:
                  type: boolean
                  description: ''
                  example: false
                quantity:
                  type: number
                  description: ''
                  example: 3.0
                min_party_size:
                  type: number
                  description: ''
                  example: 5.0
                max_party_size:
                  type: number
                  description: ''
                  example: 43135.5791979
                expires_at:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>yesterday</code>.'
                  example: '2080-10-31'
              required:
                - team_id
                - id
                - description
                - public
                - resettable
                - quantity
                - min_party_size
                - max_party_size
  /api/ticketing/table/tier/setPublic:
    post:
      summary: SetPublicTableTier
      description: "set public or not a Ticket Tier on the related Event. Can only be edited by related Event Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Ticketing.Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                public:
                  type: boolean
                  description: ''
                  example: true
              required:
                - id
                - public
  /api/ticketing/table/tier/delete:
    post:
      summary: DeleteTableTier
      description: "Deletes a Table Tier on the related Event. Can only be edited by related Event Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Ticketing.Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - team_id
                - id
  /api/ticketing/table/get/user:
    post:
      summary: GetOwnTableTickets
      description: "Views all bought Tickets for the calling user\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Ticketing.Table
  /api/ticketing/table/get/table:
    post:
      summary: GetTableIssuedTableTickets
      description: "Views all bought Tables for the specified Event. Can only be called by related Team Owner of the Event\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Ticketing.Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                event_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - team_id
                - event_id
  '/api/ticketing/ticket/tier/get/{event_id}':
    get:
      summary: GetEventTicketTiers
      description: "Views all viewable Ticket Tiers for specified Event. Related Event Team Owner can also view non public Ticket Tiers\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Ticketing.Ticket
    parameters:
      -
        in: path
        name: event_id
        description: 'Event id to search for'
        example: 1
        required: true
        schema:
          type: integer
  '/api/ticketing/ticket/tier/id/{ticketTier_id}':
    get:
      summary: GetTicketTier
      description: "Views a Ticket Tier by id. Related Event Team Owner can also view non public Ticket Tiers\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Ticketing.Ticket
    parameters:
      -
        in: path
        name: ticketTier_id
        description: 'TicketTier id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/ticketing/ticket/tier/create:
    post:
      summary: CreateTicketTier
      description: "Creates a Ticket Tier on the related Event. Can only be created by related Event Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Ticketing.Ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                event_id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 32 characters.'
                  example: 'Biglietto Base'
                description:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: Pane
                rules:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: 'ofage,age-range:14-35'
                price:
                  type: string
                  description: Price
                  example: '100.99'
                quantity:
                  type: number
                  description: ''
                  example: 2.0
                expires_at:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>yesterday</code>.'
                  example: '2029-09-10'
              required:
                - team_id
                - event_id
                - name
                - description
                - price
                - quantity
  /api/ticketing/ticket/tier/edit:
    post:
      summary: EditTicketTier
      description: "Edites a Ticket Tier on the related Event. Can only be edited by related Event Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Ticketing.Ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                id:
                  type: integer
                  description: ''
                  example: 4
                description:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: Pane2
                rules:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: 'ofage,age-range:16-40'
                quantity:
                  type: number
                  description: ''
                  example: 3.0
                expires_at:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>yesterday</code>.'
                  example: '2064-01-14'
              required:
                - team_id
                - id
                - description
                - quantity
  /api/ticketing/ticket/tier/setPublic:
    post:
      summary: SetPublicTicketTier
      description: "set public or not a Ticket Tier on the related Event. Can only be edited by related Event Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Ticketing.Ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                public:
                  type: boolean
                  description: ''
                  example: true
              required:
                - id
                - public
  /api/ticketing/ticket/tier/delete:
    post:
      summary: DeleteTicketTier
      description: "Deletes a Ticket Tier on the related Event. Can only be edited by related Event Team Owner\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Ticketing.Ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - team_id
                - id
  /api/ticketing/ticket/get/user:
    post:
      summary: GetOwnTickets
      description: "Views all bought Tickets for the calling user\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Ticketing.Ticket
  /api/ticketing/ticket/get/event:
    post:
      summary: GetEventIssuedTickets
      description: "Views all bought Tickets for the specified Event. Can only be called by related Team Owner of the Event\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Ticketing.Ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  description: ''
                  example: 1
                event_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - team_id
                - event_id
  /api/transport/ncc-team/ride/list/filtered:
    post:
      summary: GetNccTeamRidesFiltered
      description: "Views all Rides related to calling NccTeam with search filters. Calling user must be Onwner or Manager of that team.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.Ride
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                states:
                  type: array
                  description: 'Must be one of <code>Draft</code>, <code>Finalized</code>, <code>Published</code>, <code>Ready</code>, <code>Started</code>, <code>Finished</code>, or <code>Cancelled</code> Must be at least 1 characters. Must not be greater than 64 characters.'
                  example:
                    - Draft
                    - Published
                  items:
                    type: string
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - states
                - ncc_team_id
  /api/transport/ncc-team/ride/cancel:
    post:
      summary: CancelNccTeamRide
      description: "Cancels the ride and issues a refund (if applicable). Passed ride must be owned by calling User Team memmeber. Calling User must be Owner or Manager.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.Ride
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - ncc_team_id
    parameters:
      -
        in: path
        name: ride_id
        description: 'Rider id for finding the ride'
        example: 1
        required: true
        schema:
          type: integer
  /api/transport/ncc-team/ride/confirm:
    post:
      summary: ConfirmNccTeamRide
      description: "Confirms the ride, and assigned passed Rider and Vehicle to the ride. Passed ride must be owned by calling User of related NccTeam.\nCalling User must be Owner or Manager. Passed Rider must be Driver for the related NccTeam. Passed Vehicle must be related to NccTeam.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.Ride
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                confirm:
                  type: boolean
                  description: ''
                  example: false
                rider_id:
                  type: integer
                  description: ''
                  example: 1
                vehicle_id:
                  type: integer
                  description: ''
                  example: 1
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - confirm
                - ncc_team_id
    parameters:
      -
        in: path
        name: ride_id
        description: 'Rider id for finding the ride'
        example: 1
        required: true
        schema:
          type: integer
  '/api/transport/user/get/ride/{ride_id}':
    get:
      summary: GetRide
      description: "Views specified Ride related to calling User\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.Ride
    parameters:
      -
        in: path
        name: ride_id
        description: 'Ride id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/transport/user/get/rides:
    get:
      summary: GetMyRides
      description: "Views all Rides related to calling User\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.Ride
    parameters:
      -
        in: path
        name: ride
        description: 'Ride id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/transport/user/get/rides/filtered:
    post:
      summary: GetMyRidesFiltered
      description: "Views all Rides related to calling User with search filters\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.Ride
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                states:
                  type: array
                  description: 'Must be one of <code>Draft</code>, <code>Finalized</code>, <code>Published</code>, <code>Ready</code>, <code>Started</code>, <code>Finished</code>, or <code>Cancelled</code> Must be at least 1 characters. Must not be greater than 64 characters.'
                  example:
                    - Draft
                    - Published
                  items:
                    type: string
              required:
                - states
  /api/transport/ride/create:
    post:
      summary: CreateRide
      description: "Creates a ride\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                    real_distance: '10.57'
                    price: '15.07'
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                      real_distance: '10.57'
                      price: '15.07'
                    description: Data
      tags:
        - Transport.Ride
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from_address:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: 'Viale Verona, 78, Altavilla Vicentina, VI'
                from_latitude:
                  type: string
                  description: 'From latitude'
                  example: '45.5089897'
                from_longitude:
                  type: string
                  description: 'From longitude'
                  example: '11.4423697'
                to_address:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: 'Villa Bonin Club and Restaurant, Via del Commercio, Vicenza, VI'
                to_latitude:
                  type: string
                  description: 'To latitude'
                  example: '45.5282678'
                to_longitude:
                  type: string
                  description: 'To longitude'
                  example: '11.501035'
                used_seats:
                  type: integer
                  description: 'Must be between 1 and 128.'
                  example: 1
                pickup_at:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>yersterday</code>.'
                  example: '8-10-2022 20:00:00'
                vehicle_type_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - from_address
                - from_latitude
                - from_longitude
                - to_address
                - to_latitude
                - to_longitude
                - used_seats
                - pickup_at
                - vehicle_type_id
  '/api/transport/ride/delete/{ride_id}':
    get:
      summary: DeleteRide
      description: "delete a ride. Can only be deleted by related User and if state == Draft\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.Ride
    parameters:
      -
        in: path
        name: ride_id
        description: 'Ride id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/transport/ride/start:
    post:
      summary: StartRide
      description: "Calling Rider starts the ride.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.Ride
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
  /api/transport/ride/stop:
    post:
      summary: StopRide
      description: "Calling Rider stops the ride.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.Ride
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
  '/api/transport/tier/get/{rideTier_id}':
    get:
      summary: GetRideTier
      description: "Views a RideTier by id related to referred NccTeam. Calling user must be Owner of that Team.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                    name: '1st Location'
                    description: Team1-AAAAA
                    address: 'Via Mondo'
                    latitude: '0.44300000'
                    longitude: '23.44300000'
                    days: 'mon,tue'
                    times: '0:33,0:34'
                    age_people: MF
                    location_category: test-categoria
                    max_people: 10
                    active: true
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                      name: '1st Location'
                      description: Team1-AAAAA
                      address: 'Via Mondo'
                      latitude: '0.44300000'
                      longitude: '23.44300000'
                      days: 'mon,tue'
                      times: '0:33,0:34'
                      age_people: MF
                      location_category: test-categoria
                      max_people: 10
                      active: true
                    description: Data
      tags:
        - Transport.RideTier
    parameters:
      -
        in: path
        name: rideTier_id
        description: 'The ID of the RideTier.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/transport/tier/list/{nccTeam_id}':
    get:
      summary: GetRideTiers
      description: "Shows all available RideTiers of passed NccTeam. Calling user must be Owner of that Team.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.RideTier
    parameters:
      -
        in: path
        name: nccTeam_id
        description: 'The ID of the nccTeam.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: ncc_team_id
        description: 'The ID of the NccTeam.'
        example: 1
        required: true
        schema:
          type: integer
  /api/transport/tier/create:
    post:
      summary: CreateRideTier
      description: "Creates a RideTier for the passed NccTeam. Calling user must be Owner of that Team.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.RideTier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 32 characters.'
                  example: 'Piano base'
                description:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: 'Piano base fino a 4 passeggieri'
                rules:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: aylqmvqumewjjptfqgfnytkigwzonltwllrdvlsgdmqhxirssttan
                activation_fee:
                  type: string
                  description: 'Activation fee'
                  example: '5.00'
                activation_fee_reason:
                  type: string
                  description: 'Must not be greater than 128 characters.'
                  example: 'Motivo tariffa'
                max_seats:
                  type: number
                  description: ''
                  example: 4.0
                vehicle_type_id:
                  type: integer
                  description: ''
                  example: 1
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - name
                - description
                - activation_fee
                - activation_fee_reason
                - vehicle_type_id
                - ncc_team_id
  /api/transport/tier/edit:
    post:
      summary: EditRideTier
      description: "Edites a RideTier related to passed NccTeam. Calling user must be Owner of that Team.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.RideTier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 32 characters.'
                  example: 'Piano base pubblico'
                description:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: 'Piano base fino a 4 passeggieri pubblicato'
                rules:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: yofxank
                activation_fee:
                  type: string
                  description: 'Activation fee'
                  example: '5.00'
                max_seats:
                  type: number
                  description: ''
                  example: 5.0
                public:
                  type: boolean
                  description: ''
                  example: true
                vehicle_type_id:
                  type: integer
                  description: ''
                  example: 1
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - name
                - description
                - activation_fee
                - public
                - vehicle_type_id
                - ncc_team_id
  /api/transport/tier/delete:
    post:
      summary: DeleteRideTier
      description: "Deletes a RideTier related to passed NccTeam. Calling user must be Owner of that Team.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.RideTier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - ncc_team_id
  '/api/transport/tier/pricing/get/{rideTierPricing_id}':
    get:
      summary: GetRideTierPricing
      description: "Views a RideTierPricing by id. Calling user must be Owner of related Ncc Team.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                    name: '1st Location'
                    description: Team1-AAAAA
                    address: 'Via Mondo'
                    latitude: '0.44300000'
                    longitude: '23.44300000'
                    days: 'mon,tue'
                    times: '0:33,0:34'
                    age_people: MF
                    location_category: test-categoria
                    max_people: 10
                    active: true
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                      name: '1st Location'
                      description: Team1-AAAAA
                      address: 'Via Mondo'
                      latitude: '0.44300000'
                      longitude: '23.44300000'
                      days: 'mon,tue'
                      times: '0:33,0:34'
                      age_people: MF
                      location_category: test-categoria
                      max_people: 10
                      active: true
                    description: Data
      tags:
        - Transport.RideTier
    parameters:
      -
        in: path
        name: rideTierPricing_id
        description: 'The ID of the RideTierPricing.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/transport/tier/pricing/list/{rideTier_id}':
    get:
      summary: GetRideTierPricings
      description: "Shows all available RideTierPricings for specified RideTier. Calling user must be Owner of related Ncc Team.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.RideTier
    parameters:
      -
        in: path
        name: rideTier_id
        description: 'The ID of the RideTier.'
        example: 1
        required: true
        schema:
          type: integer
  /api/transport/tier/pricing/create:
    post:
      summary: CreateRideTierPricing
      description: "Creates a RideTierPricing and assigns it to calling NccTeam user. Calling user must be Owner of the passed NccTeam.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.RideTier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ride_tier_id:
                  type: integer
                  description: ''
                  example: 1
                max_distance:
                  type: number
                  description: ''
                  example: 2.0
                km_price:
                  type: string
                  description: 'KM price fee'
                  example: '2.99'
                km_price_reason:
                  type: string
                  description: 'Must not be greater than 128 characters.'
                  example: 'Prezzo fascia per 2KM'
                ncc_team_id:
                  type: number
                  description: ''
                  example: 1.0
              required:
                - ride_tier_id
                - km_price
                - km_price_reason
                - ncc_team_id
  /api/transport/tier/pricing/edit:
    post:
      summary: EditRideTierPricing
      description: "Edites a RideTierPricing and assigns it to calling NccTeam user. Calling user must be Owner of the passed NccTeam.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.RideTier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                max_distance:
                  type: number
                  description: ''
                  example: 2.0
                km_price:
                  type: string
                  description: 'KM price fee'
                  example: '2.99'
                km_price_reason:
                  type: string
                  description: 'Must not be greater than 128 characters.'
                  example: 'Prezzo fascia per 2KM'
                ncc_team_id:
                  type: number
                  description: ''
                  example: 1.0
              required:
                - id
                - km_price
                - km_price_reason
                - ncc_team_id
  /api/transport/tier/pricing/delete:
    post:
      summary: DeleteRideTierPricing
      description: "Deletes a RideTierPricing. Calling user must be Owner of the passed NccTeam.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.RideTier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - ncc_team_id
  '/api/transport/tier/price-variant/get/{rideTierPriceVariant_id}':
    get:
      summary: GetRideTierPriceVariant
      description: "Views a RideTierPriceVariant by id. Calling user must be Owner of related Ncc Team.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                    name: '1st Location'
                    description: Team1-AAAAA
                    address: 'Via Mondo'
                    latitude: '0.44300000'
                    longitude: '23.44300000'
                    days: 'mon,tue'
                    times: '0:33,0:34'
                    age_people: MF
                    location_category: test-categoria
                    max_people: 10
                    active: true
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                      name: '1st Location'
                      description: Team1-AAAAA
                      address: 'Via Mondo'
                      latitude: '0.44300000'
                      longitude: '23.44300000'
                      days: 'mon,tue'
                      times: '0:33,0:34'
                      age_people: MF
                      location_category: test-categoria
                      max_people: 10
                      active: true
                    description: Data
      tags:
        - Transport.RideTier
    parameters:
      -
        in: path
        name: rideTierPriceVariant_id
        description: 'The ID of the RideTierPriceVariant.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/transport/tier/price-variant/list/{rideTier_id}':
    get:
      summary: GetRideTierPriceVariants
      description: "Shows all available RideTierPriceVariant for specified RideTier. Calling user must be Owner of related NccTeam.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.RideTier
    parameters:
      -
        in: path
        name: rideTier_id
        description: 'The ID of the RideTier.'
        example: 1
        required: true
        schema:
          type: integer
  /api/transport/tier/price-variant/create:
    post:
      summary: CreateRideTierPriceVariant
      description: "Creates a RideTierPriceVariant and assigns it to calling NccTeam user. Calling user must be Owner of the passed NccTeam.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.RideTier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ride_tier_id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 32 characters.'
                  example: 'Sovraprezzo al KM Test'
                description:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: 'Sovraprezzo al KM per testing'
                rules:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: 'national-holiday:it'
                extra_km_price:
                  type: string
                  description: 'KM price fee'
                  example: '2.99'
                extra_km_price_reason:
                  type: string
                  description: 'Must not be greater than 128 characters.'
                  example: 'Sovrapprezzo test'
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - ride_tier_id
                - name
                - description
                - extra_km_price
                - extra_km_price_reason
                - ncc_team_id
  /api/transport/tier/price-variant/edit:
    post:
      summary: EditRideTierPriceVariant
      description: "Edites a RideTierPriceVariant and assigns it to calling NccTeam user. Calling user must be Owner of the passed NccTeam.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.RideTier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                name:
                  type: string
                  description: 'Must not be greater than 32 characters.'
                  example: 'Sovraprezzo al KM Test2'
                description:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: 'Sovraprezzo al KM per testing2'
                rules:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: 'day-of-week:7'
                public:
                  type: boolean
                  description: ''
                  example: false
                extra_km_price:
                  type: string
                  description: 'KM price fee'
                  example: '2.99'
                extra_km_price_reason:
                  type: string
                  description: 'Must not be greater than 128 characters.'
                  example: 'Sovrapprezzo test2'
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - name
                - description
                - public
                - extra_km_price
                - extra_km_price_reason
                - ncc_team_id
  /api/transport/tier/price-variant/delete:
    post:
      summary: DeleteRideTierPriceVariant
      description: "Deletes a RideTierPriceVariant. Calling user must be Owner of the passed NccTeam.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.RideTier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - ncc_team_id
  /api/transport/rider/create:
    post:
      summary: CreateRider
      description: "Creates a Rider\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.Rider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                license_number:
                  type: string
                  description: 'Must not be greater than 16 characters.'
                  example: EKKEKEKEKEKE
                release_town_name:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: Vicenza
                released_at:
                  type: string
                  description: 'Must be a valid date. Must be a date before <code>expires_at</code>.'
                  example: 12-01-2022
                expires_at:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>today</code>.'
                  example: 12-01-2024
              required:
                - license_number
                - release_town_name
                - released_at
                - expires_at
  /api/transport/rider/get/self:
    get:
      summary: GetRiderSelf
      description: "Views calling Rider personal info\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.Rider
  /api/transport/rider/rides/get:
    get:
      summary: GetRides
      description: "Views calling User rides\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.Rider
  /api/transport/rider/rides/get/filtered:
    post:
      summary: GetRiderRidesFiltered
      description: "Views calling Rider Rides with search filters\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.Rider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                states:
                  type: array
                  description: 'Must be one of <code>Ready</code>, <code>Started</code>, <code>Finished</code>, or <code>Cancelled</code> Must be at least 1 characters. Must not be greater than 64 characters.'
                  example:
                    - Ready
                  items:
                    type: string
              required:
                - states
  '/api/transport/rider/ride/get/{ride_id}':
    get:
      summary: GetRideForRider
      description: "Views specified Ride related to calling Rider\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.Rider
    parameters:
      -
        in: path
        name: ride_id
        description: 'Ride id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/transport/rider/status/change:
    post:
      summary: ChangeRiderStatus
      description: "Changes the calling rider status\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.Rider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 'Must be one of <code>Offline</code> or <code>Online</code> Must not be greater than 8 characters.'
                  example: Offline
              required:
                - status
  /api/transport/rider/log:
    post:
      summary: LogRider
      description: "Logs realtime Rider position for search\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - Transport.Rider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                latitude:
                  type: string
                  description: Latitude
                  example: '45.549999'
                longitude:
                  type: string
                  description: Longitude
                  example: '11.550000'
              required:
                - latitude
                - longitude
  /api/transport/vehicle/create:
    post:
      summary: CreateVehicle
      description: "Creates a Vehicle and assigns it to calling Rider. Can only be executed by a rider\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Transport.Vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plaque:
                  type: string
                  description: 'Must not be greater than 10 characters.'
                  example: AA945VV
                seats:
                  type: integer
                  description: 'Must be between 1 and 128.'
                  example: 5
                registered_at:
                  type: string
                  description: 'Must be a valid date.'
                  example: 01-12-2015
                brand:
                  type: string
                  description: 'Must not be greater than 16 characters.'
                  example: Marcedes
                model:
                  type: string
                  description: 'Must not be greater than 16 characters.'
                  example: 'Classe A Sedan'
                vehicle_type_id:
                  type: integer
                  description: ''
                  example: 3
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
                ncc_location_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - plaque
                - seats
                - registered_at
                - brand
                - model
                - vehicle_type_id
                - ncc_team_id
                - ncc_location_id
  /api/transport/vehicle/availability:
    post:
      summary: ChangeVehicleAvailability
      description: "Changes the Vehicle availability. Calling User must be Owner or Manager of the related NccTeam\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Transport.Vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
                available:
                  type: boolean
                  description: ''
                  example: false
              required:
                - id
                - ncc_team_id
                - available
  /api/transport/vehicle/move:
    post:
      summary: MoveVehicleToNewNccLocation
      description: "Moves the veicle to the passed new Location. Passed location must be different from previous. Calling User must be owner or Manager of the related NccTeam.\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      id: 1
                    description: Data
      tags:
        - Transport.Vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 1
                ncc_team_id:
                  type: integer
                  description: ''
                  example: 1
                ncc_location_id:
                  type: integer
                  description: ''
                  example: 1
              required:
                - id
                - ncc_team_id
                - ncc_location_id
  '/api/transport/vehicle/list/{nccTeam_id}/{available}':
    get:
      summary: GetNccTeamVehicles
      description: "Views calling Rider related Vehicles\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.Vehicle
    parameters:
      -
        in: path
        name: nccTeam_id
        description: 'The ID of the nccTeam.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: available
        description: 'Optional parameter. bool optional If specified finds only available or unavailable Vehicles'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 'true'
      -
        in: path
        name: ncc_team_id
        description: 'NccTeam id to search for'
        example: 1
        required: true
        schema:
          type: integer
  /api/transport/vehicle/type/all:
    get:
      summary: GetVehicleTypes
      description: "Views all available VehicleTypes\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data: {  }
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example: {  }
                    description: Data
      tags:
        - Transport.Vehicle
  /api/user/me:
    get:
      summary: Me
      description: "Gets user data\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    name: 'Marco Rossi'
                    email: z.stefano.45@gmail.com
                properties:
                  data:
                    type: object
                    example:
                      id: 1
                      name: 'Marco Rossi'
                      email: z.stefano.45@gmail.com
                    description: Data
      tags:
        - User
  /api/user/logout:
    get:
      summary: Logout
      description: "Loggesout the user\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '}'
      tags:
        - User
  /api/user/delete:
    get:
      summary: Delete
      description: "Deletes the user\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '}'
      tags:
        - User
  /api/user/update-password:
    post:
      summary: UpdatePassword
      description: "Updates the user password while logged in\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"old_password" : "MyNewPassword123", "password" : "MyPassword123", "password_confirmation" : "MyPassword123}}'
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  description: ''
                  example: MyPassword123
                password:
                  type: string
                  description: 'The value and <code>old_password</code> must be different.'
                  example: NewMyPassword123
              required:
                - old_password
                - password
  /api/user/update-profile:
    post:
      summary: UpdateProfile
      description: "Updates the user profile\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: '{"name": "Marco Rossi Modificato", "email": "z.stefano.45@gmail.com", "city": "Vicenza", "city_latitude": "1.11111", "city_longitude": "1.11111"}}'
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'Marco Rossi Modificato'
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: z.stefano.45@gmail.com
                phone:
                  type: string
                  description: ''
                  example: '+39 3333333330'
                city:
                  type: string
                  description: ''
                  example: Vicenza
                city_latitude:
                  type: string
                  description: 'City latitude'
                  example: '1.11111'
                city_longitude:
                  type: string
                  description: 'City longitude'
                  example: '1.11111'
              required:
                - name
                - email
                - phone
                - city
                - city_latitude
                - city_longitude
  /api/user/update-locale:
    post:
      summary: UpdateUserLocale
      description: "Updates the user locale\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - User
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                locale:
                  type: string
                  description: 'Must be one of <code>en</code> or <code>it</code> Must not be greater than 2 characters.'
                  example: it
  /api/user/fcm/register:
    post:
      summary: RegisterUserFCMToken
      description: "Registers the user Firebase FCM token\n\nAbort operation"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: FCM
              required:
                - token
  /api/user/auth/register:
    post:
      summary: Register
      description: "Register that user. If everything is okay, you'll get a 200 OK response and the data.\n\nOtherwise, the request will fail with a 404 error, and a response listing the failed message."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - User.Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'Marco Rossi'
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: z.stefano.45@gmail.com
                password:
                  type: string
                  description: ''
                  example: MyPassword123
                gender:
                  type: string
                  description: 'Must be one of <code>M</code> or <code>F</code>.'
                  example: M
                dob:
                  type: string
                  description: 'Must be a valid date. Must be a date before <code>today</code>.'
                  example: 12/11/2001
                phone:
                  type: string
                  description: ''
                  example: '+39 3333333330'
                city:
                  type: string
                  description: ''
                  example: Vicenza
                city_latitude:
                  type: string
                  description: 'City latitude'
                  example: '1.11111'
                city_longitude:
                  type: string
                  description: 'City longitude'
                  example: '1.11111'
                max_budget:
                  type: string
                  description: 'Max budget'
                  example: '50'
                preferred_musics:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'House,Tecno'
                preferred_location_category:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: Discoteca
                password_confirmation:
                  type: string
                  description: 'Password confirmation'
                  example: MyPassword123
              required:
                - name
                - email
                - password
                - gender
                - dob
                - phone
                - city
                - city_latitude
                - city_longitude
                - max_budget
                - password_confirmation
      security: []
  /api/user/auth/login:
    post:
      summary: Login
      description: "Login that user. If everything is okay, you'll get a 200 OK response and the data.\n\nOtherwise, the request will fail with a 404 error, and a response listing the failed message."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                  data:
                    token: 10|l3uidDHLL7F6hJQPjFOlpHq4U09l2D08Y5j7Ujc8
                    roles: User
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    example:
                      token: 10|l3uidDHLL7F6hJQPjFOlpHq4U09l2D08Y5j7Ujc8
                      roles: User
      tags:
        - User.Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: z.stefano.45@gmail.com
                password:
                  type: string
                  description: ''
                  example: MyPassword123
                device_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: Samsung123
              required:
                - email
                - password
                - device_name
      security: []
  /api/user/auth/forgot-password:
    post:
      summary: ForgotPassword
      description: "Sends forgotten password challenge link via email\n\nAbort operation"
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '403'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '403'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    email: z.stefano.45@gmail.com
                properties:
                  data:
                    type: object
                    example:
                      email: z.stefano.45@gmail.com
                    description: Data
      tags:
        - User.Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: z.stefano.45@gmail.com
              required:
                - email
      security: []
  /api/user/auth/reset-password:
    post:
      summary: ResetPassword
      description: "Updates forgotten password\n\nAbort operation"
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    email: z.stefano.45@gmail.com
                    password: NewMyPassword123
                    password_confirmation: NewMyPassword123
                    token: b38d39ee31c95874833ce0c9c314eca3da1e402f9422703736b2e096f633b2fa
                properties:
                  data:
                    type: object
                    example:
                      email: z.stefano.45@gmail.com
                      password: NewMyPassword123
                      password_confirmation: NewMyPassword123
                      token: b38d39ee31c95874833ce0c9c314eca3da1e402f9422703736b2e096f633b2fa
                    description: Data
      tags:
        - User.Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: z.stefano.45@gmail.com
                password:
                  type: string
                  description: ''
                  example: NewMyPassword123
                token:
                  type: string
                  description: 'Must not be greater than 64 characters.'
                  example: da530ce79bb364f7df019e0d5d7a6eb07888d4a0b98544b2d05b708e1d7a9149
              required:
                - email
                - password
                - token
      security: []
    parameters:
      -
        in: path
        name: token
        description: 'Challenge token to authorize password reset'
        example: bee1333f6d89b3fa8b2b0eba52b41a608402aa4ab71c986f714f7d956bc42892
        required: true
        schema:
          type: string
  '/api/user/auth/reset-password/{token}':
    get:
      summary: ResetPasswordUrlToken
      description: "Necessary for email request template\n\nAbort operation"
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not available'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    email: z.stefano.45@gmail.com
                    password: NewMyPassword123
                    password_confirmation: NewMyPassword123
                    token: b38d39ee31c95874833ce0c9c314eca3da1e402f9422703736b2e096f633b2fa
                properties:
                  data:
                    type: object
                    example:
                      email: z.stefano.45@gmail.com
                      password: NewMyPassword123
                      password_confirmation: NewMyPassword123
                      token: b38d39ee31c95874833ce0c9c314eca3da1e402f9422703736b2e096f633b2fa
                    description: Data
      tags:
        - User.Auth
      security: []
    parameters:
      -
        in: path
        name: token
        description: 'Challenge token to authorize password reset'
        example: 362ce36e7d07fa57d2d6efa9d3bb389306d8ec6473f275f752e6e43e9439397a
        required: true
        schema:
          type: string
  /api/user/auth/oauth/mobile/apple/redirect:
    post:
      summary: OauthSocialiteAppleMobileRedirect
      description: "Socialite Oauth special route for Apple mobile\n\nOtherwise, the request will fail with a 404 error, and a response listing the failed message."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - User.Auth
      security: []
    parameters:
      -
        in: path
        name: driver
        description: 'Socialite driver name to use'
        example: github
        required: true
        schema:
          type: string
  /api/user/auth/oauth/mobile-ncc/apple/redirect:
    post:
      summary: OauthSocialiteNccAppleMobileRedirect
      description: "Socialite Oauth special route for Ncc Apple mobile\n\nOtherwise, the request will fail with a 404 error, and a response listing the failed message."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - User.Auth
      security: []
    parameters:
      -
        in: path
        name: driver
        description: 'Socialite driver name to use'
        example: github
        required: true
        schema:
          type: string
  '/api/user/auth/oauth/{driver}/redirect':
    get:
      summary: OauthSocialiteRedirect
      description: "Socialite Oauth 1.0/2.0 redirection route\n\nOtherwise, the request will fail with a 404 error, and a response listing the failed message."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - User.Auth
      security: []
    parameters:
      -
        in: path
        name: driver
        description: 'Socialite driver name to use'
        example: github
        required: true
        schema:
          type: string
  '/api/user/auth/oauth/{driver}/callback':
    get:
      summary: OauthSocialiteCallback
      description: "Socialite Oauth 1.0/2.0 callback route\n\nOtherwise, the request will fail with a 404 error, and a response listing the failed message."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - User.Auth
      security: []
    parameters:
      -
        in: path
        name: driver
        description: 'Socialite driver name to use'
        example: github
        required: true
        schema:
          type: string
  '/api/user/auth/oauth/{driver}/callback/token':
    post:
      summary: OauthSocialiteFromToken
      description: "Socialite Oauth 1.0/2.0 callback route\n\nApple doesn't recover full name from the token, so we need to pass on this request\n\nOtherwise, the request will fail with a 404 error, and a response listing the failed message."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - User.Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: ''
                  example: 2OOg5BYk68RNeu35E3lwVi2NcQ3
                secret:
                  type: string
                  description: ''
                  example: temporibus
                first_name:
                  type: string
                  description: ''
                  example: iusto
                last_name:
                  type: string
                  description: ''
                  example: omnis
              required:
                - token
      security: []
    parameters:
      -
        in: path
        name: driver
        description: 'Socialite driver name to use'
        example: github
        required: true
        schema:
          type: string
  /api/user/auth/onboarding/complete:
    post:
      summary: SocialiteRegister
      description: "Register using socialite that user. If everything is okay, you'll get a 200 OK response and the data.\n\nOtherwise, the request will fail with a 404 error, and a response listing the failed message."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '200'
                  message: Success
                properties:
                  status:
                    type: string
                    example: '200'
                  message:
                    type: string
                    example: Success
      tags:
        - User.Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'Must not be greater than 27 characters.'
                  example: 2OOg5BYk68RNeu35E3lwVi2NcQ3
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'Marco Rossi'
                gender:
                  type: string
                  description: 'Must be one of <code>M</code> or <code>F</code>.'
                  example: M
                dob:
                  type: string
                  description: 'Must be a valid date. Must be a date before <code>today</code>.'
                  example: 12/11/2001
                phone:
                  type: string
                  description: 'Must be at least 10 characters. Must not be greater than 18 characters.'
                  example: '+39 3333333330'
                city:
                  type: string
                  description: ''
                  example: Vicenza
                city_latitude:
                  type: string
                  description: 'City latitude'
                  example: '1.11111'
                city_longitude:
                  type: string
                  description: 'City longitude'
                  example: '1.11111'
                max_budget:
                  type: string
                  description: 'Max budget'
                  example: '50'
                preferred_musics:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'House,Tecno'
                preferred_location_category:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: Discoteca
              required:
                - token
                - name
                - gender
                - dob
                - phone
                - city
                - city_latitude
                - city_longitude
                - max_budget
      security: []
  '/api/user/auth/onboarding/{token}':
    get:
      summary: SocialiteOnboardingData
      description: "Onboarding Oauth data for social account registration\n\nOtherwise, the request will fail with a 404 error, and a response listing the failed message."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: 'Not avaible'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: '404'
                  message: Error
                properties:
                  status:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: Error
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - User.Auth
      security: []
    parameters:
      -
        in: path
        name: token
        description: 'Socialite swap token to get login flow state data'
        example: 2OOU3pVw3y3m5zDrPyoVwilwo30
        required: true
        schema:
          type: string
tags:
  -
    name: Attachment
    description: ''
  -
    name: Backoffice
    description: ''
  -
    name: Backoffice.Activation
    description: ''
  -
    name: Backoffice.Configuration
    description: ''
  -
    name: Backoffice.Event
    description: ''
  -
    name: Backoffice.Invoice
    description: ''
  -
    name: Backoffice.NccTeam
    description: ''
  -
    name: Backoffice.Report
    description: ''
  -
    name: Backoffice.Review
    description: ''
  -
    name: Backoffice.Tag
    description: ''
  -
    name: Backoffice.Team
    description: ''
  -
    name: Backoffice.TicketTier
    description: ''
  -
    name: Backoffice.Transport
    description: ''
  -
    name: Backoffice.User
    description: ''
  -
    name: Event
    description: ''
  -
    name: Feedback.Like
    description: ''
  -
    name: Feedback.Report
    description: ''
  -
    name: Feedback.Review
    description: ''
  -
    name: Invoice
    description: ''
  -
    name: Location
    description: ''
  -
    name: NccTeam
    description: ''
  -
    name: NccTeam.Location
    description: ''
  -
    name: Party
    description: ''
  -
    name: Root
    description: ''
  -
    name: Tag
    description: ''
  -
    name: Team
    description: ''
  -
    name: Team.Subscription
    description: ''
  -
    name: Ticketing.Table
    description: ''
  -
    name: Ticketing.Ticket
    description: ''
  -
    name: Transport.Ride
    description: ''
  -
    name: Transport.RideTier
    description: ''
  -
    name: Transport.Rider
    description: ''
  -
    name: Transport.Vehicle
    description: ''
  -
    name: User
    description: ''
  -
    name: User.Auth
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
    